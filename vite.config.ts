import { writeFileSync } from 'node:fs';
import { fileURLToPath, URL } from 'node:url';

import vue from '@vitejs/plugin-vue2';
import { defineConfig, type UserConfig } from 'vite';

import laravel from 'laravel-vite-plugin';
import { visualizer } from 'rollup-plugin-visualizer';
import { checker } from 'vite-plugin-checker';

/**
 * Vite Configure
 *
 * @see {@link https://vitejs.dev/config/}
 */
export default defineConfig(
  async ({ command, mode, ssrBuild }): Promise<UserConfig> => {
    const config: UserConfig = {
      // https://vitejs.dev/config/shared-options.html#base
      base: './',
      plugins: [
        // Laravel Vite
        // https://laravel.com/docs/9.x/vite
        laravel({
          input: 'resources/js/app.ts',
          ssr: 'resources/js/ssr.ts',
          refresh: true,
        }),
        // Vue2
        // https://github.com/vitejs/vite-plugin-vue2
        vue({
          template: {
            transformAssetUrls: {
              // base: null,
              // includeAbsolute: false,
            },
          },
        }),
        // vite-plugin-checker
        // https://github.com/fi3ework/vite-plugin-checker
        checker({
          typescript: true,
          vueTsc: true,
          eslint: {
            lintCommand: 'eslint', // for example, lint .ts & .tsx
          },
        }),
      ],
      // Resolver
      resolve: {
        // https://vitejs.dev/config/shared-options.html#resolve-alias
        alias: {
          // vue @ shortcut fix
          '@': fileURLToPath(new URL('./resources/js', import.meta.url)),
          '~': fileURLToPath(new URL('./node_modules', import.meta.url)),
          'ziggy-vue': fileURLToPath(
            new URL('./vendor/tightenco/ziggy/dist/vue.m', import.meta.url)
          ),
        },
        extensions: ['.js', '.json', '.jsx', '.mjs', '.ts', '.tsx', '.vue'],
      },
      // https://vitejs.dev/config/server-options.html
      server: {
        fs: {
          // Allow serving files from one level up to the project root
          allow: ['..'],
        },
        /*
        host:
          process.env.LARAVEL_SAIL ??
          Object.values(os.networkInterfaces())
            .flat()
            .find(info => info?.internal === false)?.address,
        hmr: {
          host: 'localhost',
        },
        */
      },
      optimizeDeps: {
        include: ['ziggy'],
      },
      // Build Options
      // https://vitejs.dev/config/#build-options
      build: {
        rollupOptions:
          ssrBuild === true
            ? undefined
            : {
                external: 'ziggy',
                output: {
                  manualChunks: {
                    // Split external library from transpiled code.
                    vue: [
                      'vue',
                      // 'vue-router',
                      // 'vuex',
                      // 'vuex-persist',
                      'deepmerge',
                      // '@logue/vue2-helpers',
                      // '@logue/vue2-helpers/vuex',
                      '@logue/vue2-helpers/teleport',
                    ],
                    inertia: [
                      '@inertiajs/inertia',
                      '@inertiajs/vue2',
                      'axios',
                      'get-intrinsic',
                      'nprogress',
                      'object-inspect',
                      'qs',
                      'vendor/tightenco/ziggy/dist/vue.m.js',
                      'vue-inertia-composable',
                      'ziggy-js',
                    ],
                    lodash: ['lodash'],
                  },
                  plugins: [
                    mode === 'analyze'
                      ? // rollup-plugin-visualizer
                        // https://github.com/btd/rollup-plugin-visualizer
                        visualizer({
                          open: true,
                          filename: './docs/stats.html',
                          // gzipSize: true,
                          // brotliSize: true,
                        })
                      : undefined,
                  ],
                },
              },
        target: 'esnext',
        minify: 'esbuild',
      },
      esbuild: {
        // Drop console when production build.
        drop: command === 'serve' ? [] : ['console'],
      },
      // SSR Options
      // https://vitejs.dev/config/ssr-options.html#ssr-options
      ssr: {
        noExternal: ['laravel-vite-plugin', '@inertiajs/server'],
      },
    };

    // Write meta data.
    writeFileSync(
      fileURLToPath(new URL('resources/js/meta.ts', import.meta.url)),
      `// This file is auto-generated by the build system.
export default {
  date: '${new Date().toISOString()}',
};`
    );

    return config;
  }
);
