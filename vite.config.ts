import { checker } from 'vite-plugin-checker';
import { defineConfig, type UserConfig } from 'vite';
import { visualizer } from 'rollup-plugin-visualizer';
import laravel from 'laravel-vite-plugin';
import vue from '@vitejs/plugin-vue2';

import { fileURLToPath, URL } from 'node:url';
import fs from 'node:fs';
import os from 'node:os';

/**
 * Vite Configure
 *
 * @see {@link https://vitejs.dev/config/}
 */
export default defineConfig(
  async ({ command, mode, ssrBuild }): Promise<UserConfig> => {
    const config: UserConfig = {
      // https://vitejs.dev/config/shared-options.html#base
      base: './',
      plugins: [
        // Laravel Vite
        // https://laravel.com/docs/9.x/vite
        laravel({
          input: 'resources/js/app.ts',
          ssr: 'resources/js/ssr.ts',
          refresh: true,
        }),
        // Vue2
        // https://github.com/vitejs/vite-plugin-vue2
        vue({
          template: {
            transformAssetUrls: {
              // base: null,
              // includeAbsolute: false,
            },
          },
        }),
        // vite-plugin-checker
        // https://github.com/fi3ework/vite-plugin-checker
        checker({
          typescript: true,
          vueTsc: true,
          eslint: {
            lintCommand: 'eslint', // for example, lint .ts & .tsx
          },
        }),
        /*
      // if you use Code encryption by rollup-plugin-obfuscator
      // https://github.com/ghostdevv/rollup-obfuscator
      obfuscator({
        globalOptions: {
          debugProtection: true,
        },
      }),
      */
      ],
      // Resolver
      resolve: {
        // https://vitejs.dev/config/shared-options.html#resolve-alias
        alias: {
          // vue @ shortcut fix
          '@': fileURLToPath(new URL('./resources/js', import.meta.url)),
          '~': fileURLToPath(new URL('./node_modules', import.meta.url)),
          'ziggy-vue': fileURLToPath(
            new URL('./vendor/tightenco/ziggy/dist/vue', import.meta.url)
          ),
        },
        extensions: ['.js', '.json', '.jsx', '.mjs', '.ts', '.tsx', '.vue'],
      },
      // https://vitejs.dev/config/server-options.html
      server: {
        fs: {
          // Allow serving files from one level up to the project root
          allow: ['..'],
        },
        host: process.env.LARAVEL_SAIL
          ? Object.values(os.networkInterfaces())
              .flat()
              .find(info => info?.internal === false)?.address
          : undefined,
        hmr: {
          host: 'localhost',
        },
      },
      optimizeDeps: {
        include: ['ziggy'],
      },
      // Build Options
      // https://vitejs.dev/config/#build-options
      build: {
        rollupOptions: ssrBuild
          ? {}
          : {
              external: 'ziggy',
              output: {
                manualChunks: {
                  // Split external library from transpiled code.
                  vue: [
                    'vue',
                    // 'vue-router',
                    // 'vuex',
                    // 'vuex-persist',
                    'deepmerge',
                    // '@logue/vue2-helpers',
                    // '@logue/vue2-helpers/vuex',
                    '@logue/vue2-helpers/teleport',
                  ],
                  inertia: [
                    '@inertiajs/inertia',
                    '@inertiajs/vue2',
                    'axios',
                    'get-intrinsic',
                    'laravel-vite-plugin/inertia-helpers/index.js',
                    'nprogress',
                    'object-inspect',
                    'qs',
                    'vendor/tightenco/ziggy/dist/vue.m.js',
                    'vue-inertia-composable',
                    'ziggy-js',
                  ],
                  lodash: ['lodash'],
                },
                plugins: [
                  mode === 'analyze'
                    ? // rollup-plugin-visualizer
                      // https://github.com/btd/rollup-plugin-visualizer
                      visualizer({
                        open: true,
                        filename: './docs/stats.html',
                        // gzipSize: true,
                        // brotliSize: true,
                      })
                    : undefined,
                ],
              },
            },
        target: 'esnext',
        minify: 'esbuild',
      },
      esbuild: {
        // Drop console when production build.
        drop: command === 'serve' ? [] : ['console'],
      },
    };

    // Write meta data.
    fs.writeFileSync(
      fileURLToPath(new URL('resources/js/meta.ts', import.meta.url)),
      `// This file is auto-generated by the build system.
export default {
  date: '${new Date().toISOString()}',
};`
    );

    return config;
  }
);
